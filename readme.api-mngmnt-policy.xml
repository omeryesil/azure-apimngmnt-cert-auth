<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Request.Certificate == null )">
                <return-response>
                    <set-status code="401" reason="Client certificate required" />
                </return-response>
            </when>
            <when condition="@(!context.Request.Certificate.VerifyNoRevocation() )">
                <return-response>
                    <set-status code="401" reason="Client certificate is not valid" />
                </return-response>
            </when>
            <!-- 
            <when condition="@( context.Request.Certificate.Issuer != "CN=PRESTO Issuing CA, DC=prestomig, DC=net" || !context.Deployment.Certificates.Any(c => c.Value.Thumbprint == context.Request.Certificate.Thumbprint) || context.Request.Certificate.NotBefore > DateTime.Now || context.Request.Certificate.NotAfter < DateTime.Now )">
                <return-response>
                    <set-status code="401" reason="Client certificate is not valid" />
                </return-response>
            </when>
            -->
        </choose>
        <set-header name="certVerified" exists-action="override">
            <value>@(context.Request.Certificate.VerifyNoRevocation().ToString())</value>
        </set-header>
        <set-header name="certIssuer" exists-action="override">
            <value>@(context.Request.Certificate.Issuer)</value>
        </set-header>
        <set-header name="certThumpPrint" exists-action="override">
            <value>@(context.Request.Certificate.Thumbprint)</value>
        </set-header>
        <set-header name="certSubjectName" exists-action="override">
            <value>@{
                    //this specific example parses the OU value, which can be something else...
                    var list = context.Request.Certificate.SubjectName.Name.Split(',');
                    foreach (var part in list) {
                        if (part.IndexOf("OU=")>=0) {
                            return part.Replace("OU=", "").Replace("\"", "");
                        }
                    }
                    return "";
                }</value>
        </set-header>
        <set-header name="certNotBefore" exists-action="override">
            <value>@(context.Request.Certificate.NotBefore.ToString())</value>
        </set-header>
        <set-header name="certNotAfter" exists-action="override">
            <value>@(context.Request.Certificate.NotAfter.ToString())</value>
        </set-header>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>